let dataset;

//handleFileSelect() determines what happens when #csv-file is changed.
//It uses papaparse.min.js to generate JSON from the CSV file you pass it, then calls generateGeoJSON() on that dataset and passes the result to #output.
function handleFileSelect(event) {
    let file = event.target.files[0];

    Papa.parse(file, {
        header: true,
        complete: function(results) {
            dataset = results;
            console.log(dataset);
            document.getElementById("output").textContent = generateGeoJSON(dataset);
        }
    });

}

//Calls the generateFeatures() function on the array generated by papaparse.min.js, stored in dataset.data. The result is inserted inside the geojson variable. This is then returned.
function generateGeoJSON(dataset) {
    console.log(dataset.data);
    let datapoints = generateFeatures(dataset.data);
    let geojson = `{
        "type": "featureCollection",
        "features": ${datapoints}
    }`;

    return geojson;
}

//Generate features takes an array and maps over that array, creating each datapoint to be inserted into the GeoJSON.
//Each val inserted has checkNull() called on it to replace undefined with an empty string to maintain the validity of the JSON format.
//Line breaks are also formatted out.
function generateFeatures(featuresArr) {
    let features = featuresArr.map((val, i) => {
        return `{
            "type": "Feature",
            "properties": {
                "name": ${checkNull(val["Name"])},
                "address": ${checkNull(val["Address"])},
                "status": ${checkNull(val["Status"])},
                "owner": ${checkNull(val["Owner"])},
                "ownerType": ${checkNull(val["Owner Type"])},
                "operator": ${checkNull(val["Operator"])},
                "developer": ${checkNull(val["Developer"])},
                "capacityMWElectric": ${checkNull(val["Capacity MW electricity"])},
                "capacityMWGas": ${checkNull(val["Capacity MW gas"])},
                "capacityMWHeat": ${checkNull(val["Capacity MW heat"])},
                "simpleRenewableTechnology": ${checkNull(val["Simple Renewable Technology  Type"])},
                "typologyOfTechnology": ${checkNull(val["Typology Of Technology"])},
                "technologyProvider": ${checkNull(val["Technology Provider"])},
                "potentialCarbonReduction": ${checkNull(val["Potential Carbon Reduction (tonnes)"])},
                "calcCarbonReduction": ${checkNull(val["Calculated or Disclosed Carbon Reduction (Tonnes per year)"])},
                "conditionsForDeployment": ${checkNull(val["Conditions For Deployment"])},
                "timetable": ${checkNull(val["Timetable"])},
                "otherAssociatedInfrastructure": ${checkNull(val["Other Associated Infrastructure"])},
                "scale": ${checkNull(val["Scale"])},
                "costOfDeployment": ${checkNull(val["Cost Of Deployment"])},
                "readiness": ${checkNull(val["Readiness Of Technology"])},
                "source": ${checkNull(val["Source of information"])},
                "dateFound": ${checkNull(val["Date found"])},
                "foundBy": ${checkNull(val["Found by"])},
                "visible": "true"
            },
            "geometry": {
                "type": "Point",
                "coordinates": [
                    ${val["Long"]},
                    ${val["Lat"]}
                ]
            }
        }`
    });

    return features;
}

//checkNull() replaces null values with an empty string, and strips non-null values of line breaks.
function checkNull(val) {
    if (val == "") {
        return '""';
    } else {
        return `"${val.replace(/\r?\n|\r/g, "<br/>")}"`;
    }
}

$(document).ready(function() {
    $("#csv-file").change(handleFileSelect);
});